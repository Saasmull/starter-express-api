<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Edit post</title>
        <!--script src="https://cdn.ckeditor.com/ckeditor5/36.0.1/classic/ckeditor.js"></!--script>
        <!--script src="https://cdnjs.cloudflare.com/ajax/libs/froala-editor/4.0.17/js/froala_editor.min.js"></!--script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/froala-editor/4.0.17/css/froala_editor.min.css">
        <script src="https://cdn.jsdelivr.net/npm/@editorjs/editorjs@2.26.5/dist/editor.min.js"></script>
        <!--script-- src="https://cdn.jsdelivr.net/npm/marked@4.2.12/lib/marked.umd.min.js"></!--script-->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/mode/overlay.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/markdown/markdown.min.js"></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css">
        <!--script-- src="https://cdn.jsdelivr.net/codemirror.spell-checker/latest/spell-checker.min.js"></!--script-->
        <script src="static/marked.min.js"></script>
        <style>
            :root {
                --tab-height: 20px;
            }

            * {
                box-sizing: border-box;
            }

            html,
            body {
                font-family: sans-serif;
                width: 99.9%;
                height: 99.9%;
                margin: 0;
                overscroll-behavior: contain;
            }

            main {
                width: 90%;
                height: 90%;
                background-color: antiquewhite;
            }

            del:after,
            del:before {
                contain: strict;
                inset-block: 100% 0%;
                position: relative;
                content: "-";
                overflow: hidden;
                max-width: 1px;
                width: 1px;
                letter-spacing: 0;
                word-spacing: 0;
                text-decoration: 1px line-through black;
            }

            .tab-name-wrapper {
                display: flex;
                height: var(--tab-height);
                width: 100%;
            }

            .tab-name{
                /*touch-action: manipulation;
                overscroll-behavior: none;*/
            }

            .tab-content,
            .tab-name {
                outline: 1px inset gray;
            }

            .split-view {
                height: 100%;
                width: 100%;
            }

            .tab-content {
                height: calc(100% - var(--tab-height));
                width: 100%;
            }



            .split-view-preview.active {
                pointer-events: none;
                position: absolute;
                left: 100%;
                top: 100%;
                right: 100%;
                bottom: 100%;
                height: calc(100% - var(--tab-height));
                width: 100%;
                background-color: rgba(100, 100, 100, 0.5);
                transition: all 200ms ease-in-out 10ms;
                border-radius: 0.2rem;
            }

            .split-view-preview.active.left {
                top: var(--tab-height);
                left: 0;
                bottom: 0;
                right: 50%;
                height: calc(100% - var(--tab-height));
                width: 50%;
            }

            .split-view-preview.active.top {
                top: var(--tab-height);
                left: 0;
                bottom: 50%;
                right: 0;
                height: calc(50% - var(--tab-height));
                width: 100%;
            }

            .split-view-preview.active.right {
                top: var(--tab-height);
                left: 50%;
                bottom: 0;
                right: 0;
                height: calc(100% - var(--tab-height));
                width: 50%;
            }

            .split-view-preview.active.bottom {
                top: calc(50% + var(--tab-height));
                left: 0;
                bottom: 0;
                right: 0;
                height: calc(50% - var(--tab-height));
                width: 100%;
            }

            .split-view-preview.active.center {
                top: var(--tab-height);
                left: 0;
                bottom: 0;
                right: 0;
                height: calc(100% - var(--tab-height));
                width: 100%;
            }

            .temp-tabs,
            .temp-tabs * {
                width: 0 !important;
                height: 0 !important;
                display: none !important;
                overflow: hidden;
            }

            #markdown-editor,
            #markdown-editor>*,
            #preview,
            #preview>iframe {
                width: 100%;
                height: 100%;
            }

            #markdown-editor>div{
                height: var(--tab-height);
            }

            #markdown-editor>.CodeMirror{
                height: calc(100% - var(--tab-height));
            }
        </style>
    </head>
    <body>
        <main>
            <div class="tab-name-wrapper">
                <div class="tab-name" data-tab-id="options">Options</div>
                <div class="tab-name" data-tab-id="edit">Edit</div>
                <div class="tab-name" data-tab-id="preview">Preview</div>
                <div class="tab-name active-tab-name" data-tab-id="ckeditor">CKEditor</div>
            </div>
            <div class="tab-wrapper">
                <div class="tab" id="options">
                    <label for="title-value">Title</label>
                    <input id="title-value"><br>
                    <label for="description-value">Description</label>
                    <textarea id="description-value"></textarea><br>
                    <label for="keywords-value">Title</label>
                    <input id="keywords-value">
                </div>
                <div class="tab active-tab" id="edit">
                    <textarea id="md-editor"></textarea>
                </div>
                <div class="tab" id="preview">
                    <iframe title="preview" class="preview-iframe"></iframe>
                </div>
                <div class="tab" id="ckeditor"></div>
            </div>
            <div class="bottom-actions">
                <button>Save</button>
                <button>Publish</button>
            </div>
        </main>
        <script>
            class TabLayout {
                /**
                 * @class TabLayout
                 * @param {Element} element
                 * @constructor
                 */
                constructor(element) {
                    var _glob = this;
                    this.lastSet = false;
                    this._lastDragId = false;
                    var htmlContent =
                        "<div class=\"split-view\">" +
                        "<div class=\"tab-name-wrapper\"></div>" +
                        "<div class=\"tab-content\"></div>" +
                        "</div>";
                    element.innerHTML = htmlContent + htmlContent + "<div class=\"split-view-preview\"></div><div class=\"temp-tabs\"></div>";
                    element.style.display = "flex";
                    element.style.verticalAlign = "stretch";
                    element.style.position = "relative";
                    element.addEventListener("dragover",function(e) {
                        var maxHeight = _glob.tabLayoutWrapper.clientHeight;
                        var maxWidth = _glob.tabLayoutWrapper.clientWidth;
                        var cX = e.layerX;
                        var cY = e.layerY;
                        var pos = cX / maxWidth > cY / maxHeight;
                        pos = (cX > maxWidth / 4 && cX < maxWidth / 4 * 3 && cY > maxHeight / 4 && cY < maxHeight / 4 * 3) ? "center" :
                            (0 - maxWidth) * (cY - 0) - (maxHeight - 0) * (cX - maxWidth) > 0 ? pos ? "top" : "left" : pos ? "right" : "bottom";
                        //console.log(pos)
                        //console.log((e.layerX/maxWidth),(e.layerY/maxHeight));
                        if(pos === "top") {
                            if(_glob.lastSet !== "top") {
                                _glob.lastSet = "top";
                                /*_glob.tabLayoutWrapper.children[2].classList.remove("right");
                                _glob.tabLayoutWrapper.children[2].classList.remove("center");*/
                                _glob.tabLayoutWrapper.children[2].className = "split-view-preview active";
                                _glob.tabLayoutWrapper.children[2].classList.add("top");
                            }
                        } else if(pos === "left") {
                            if(_glob.lastSet !== "left") {
                                _glob.lastSet = "left";
                                /*_glob.tabLayoutWrapper.children[2].classList.remove("left");
                                _glob.tabLayoutWrapper.children[2].classList.remove("center");*/
                                _glob.tabLayoutWrapper.children[2].className = "split-view-preview active";
                                _glob.tabLayoutWrapper.children[2].classList.add("left");
                            }
                        } else if(pos === "right") {
                            if(_glob.lastSet !== "right") {
                                _glob.lastSet = "right";
                                /*_glob.tabLayoutWrapper.children[2].classList.remove("left");
                                _glob.tabLayoutWrapper.children[2].classList.remove("center");*/
                                _glob.tabLayoutWrapper.children[2].className = "split-view-preview active";
                                _glob.tabLayoutWrapper.children[2].classList.add("right");
                            }
                        } else if(pos === "bottom") {
                            if(_glob.lastSet !== "bottom") {
                                _glob.lastSet = "bottom";
                                /*_glob.tabLayoutWrapper.children[2].classList.remove("left");
                                _glob.tabLayoutWrapper.children[2].classList.remove("center");*/
                                _glob.tabLayoutWrapper.children[2].className = "split-view-preview active";
                                _glob.tabLayoutWrapper.children[2].classList.add("bottom");
                            }
                        } else {
                            if(_glob.lastSet !== "center") {
                                _glob.lastSet = "center";
                                _glob.tabLayoutWrapper.children[2].className = "split-view-preview active";
                                _glob.tabLayoutWrapper.children[2].classList.add("center");
                            }
                        }
                        //console.log(e,_glob);
                    })
                    element.addEventListener("dragover",function(e) {
                        //console.log(e,e.dataTransfer.getData("text/plain"),_glob);
                        //if(e.dataTransfer.getData("text/plain").startsWith("-tab-drag-id:")) {
                            e.preventDefault();
                            //return false;
                        //}
                        /*if(e.dataTransfer.getData("text/plain").startsWith("-tab-drag-id:")){
                            //e.preventDefault();
                            //e.bubbles = false;
                            e.stopPropagation();
                        }*/
                    })
                    element.addEventListener("dragenter",function(e) {
                        //console.log(e,e.dataTransfer.getData("text/plain"),_glob);
                        //if(e.dataTransfer.getData("text/plain").startsWith("-tab-drag-id:")) {
                            e.preventDefault();
                            //return false;
                        //}
                        /*if(e.dataTransfer.getData("text/plain").startsWith("-tab-drag-id:")){
                            //e.preventDefault();
                            //e.bubbles = false;
                            e.stopPropagation();
                        }*/
                    })
                    element.addEventListener("drop",function(e) {
                        console.log(e,_glob)
                        _glob.tabLayoutWrapper.children[2].classList.remove("active");
                        if((["left","right"]).includes(_glob.lastSet)) {
                            _glob.setMode(2);
                            _glob.setTabPosition(e.dataTransfer.getData("text/plain").substr(13),(_glob.lastSet === "right") + 1,true);
                        } else if((["top","bottom"]).includes(_glob.lastSet)) {
                            _glob.setMode(3);
                            _glob.setTabPosition(e.dataTransfer.getData("text/plain").substr(13),(_glob.lastSet === "bottom") + 1,true);
                        } else if(_glob.lastSet === "center") {
                            _glob.setMode(1);
                            _glob.setTabPosition(e.dataTransfer.getData("text/plain").substr(13),1,true)
                        }
                        _glob.lastSet = false;
                        _glob._lastDragId = false;
                    })
                    /**
                     * 
                     * @type {(1|2|3)}
                     * @public
                     */
                    this.mode = 1;
                    this.tabLayoutWrapper = element;
                    this.tabs = {};
                    this.setMode(1);
                }
                /**
                 * 
                 * @param {(1|2|3)} mode
                 */
                setMode(mode) {
                    this.mode = mode;
                    this.tabLayoutWrapper.style.flexDirection = mode > 2 ? "column" : "row";
                    this.tabLayoutWrapper.children[1].style.display = mode > 1 ? "block" : "none";
                }
                /**
                 * 
                 * @param {string} id
                 * @param {(1|2)} position
                 * @param {boolean} active -Wether the tab should display over existing tabs
                */
                setTabPosition(id,position,active) {
                    var oldPosition = this.tabs[id].position;
                    this.tabs[id].position = position;
                    this.tabs[id].active = active;
                    var lastActiveIds = [false,false];
                    var wasNewActive = false;
                    for(var i in this.tabs) {
                        if(!lastActiveIds[this.tabs[i].position - 1] || (i === id && active)/* || this.tabs[i].active*/) {
                            if(this.tabLayoutWrapper.children[this.tabs[i].position - 1].children[1].children.length) {
                                this.tabLayoutWrapper.querySelector(".temp-tabs").appendChild(
                                    this.tabLayoutWrapper.children[this.tabs[i].position - 1].children[1].children[0]);
                            }
                            this.tabLayoutWrapper.children[this.tabs[i].position - 1].children[1].appendChild(this.tabs[i].tab.element);
                            if(this.tabs[i].active) {
                                if(lastActiveIds[this.tabs[i].position - 1]) {
                                    this.tabs[lastActiveIds[this.tabs[i].position - 1]].active = false;
                                }
                                lastActiveIds[this.tabs[i].position - 1] = i;
                            }
                        }
                        if(i === id && oldPosition !== position) {
                            this.tabLayoutWrapper.children[position - 1].children[0].appendChild(this.tabLayoutWrapper.querySelector("[data-tab-id=" + id + "]"));
                        }
                        console.log(i,this.tabs[i]);
                    }
                }
                /**
                 * 
                 * @param {Tab} tab
                 * @param {(1|2)} position
                 * @param {boolean} active -Wether the tab should display over existing tabs
                */
                addTab(tab,position,active) {
                    var _glob = this;
                    this.tabs[tab.id] = {
                        tab: tab,
                        position: position,
                        active: active
                    };
                    var tabName = document.createElement("div");
                    tabName.classList.add("tab-name");
                    tabName.setAttribute("data-tab-id",tab.id);
                    tabName.innerText = tab.name;
                    tabName.draggable = true;
                    tabName.addEventListener("touchstart",function(e) {
                        //console.log(e);
                        /*e.preventDefault();
                        return false;*/
                    })
                    tabName.addEventListener("dragstart",function(e) {
                        console.log(e);
                        e.dataTransfer.setData("text/plain","-tab-drag-id:" + e.target.getAttribute("data-tab-id"));
                    })
                    tabName.addEventListener("touchleave",function(e) {
                        console.log(e,_glob);
                        if(_glob._lastDragId) {
                            _glob.tabLayoutWrapper.children[2].classList.remove("active");
                            if((["left","right"]).includes(_glob.lastSet)) {
                                _glob.setMode(2);
                                _glob.setTabPosition(e.dataTransfer.getData("text/plain").substr(13),(_glob.lastSet === "right") + 1,true);
                            } else if((["top","bottom"]).includes(_glob.lastSet)) {
                                _glob.setMode(3);
                                _glob.setTabPosition(e.dataTransfer.getData("text/plain").substr(13),(_glob.lastSet === "bottom") + 1,true);
                            }
                            _glob.lastSet = false;
                            _glob._lastDragId = false;
                        }

                    })
                    tabName.addEventListener("click",function(e) {
                        console.log(e,e.target,_glob)
                        _glob.setTabPosition(e.target.getAttribute("data-tab-id"),_glob.tabs[e.target.getAttribute("data-tab-id")].position,true);
                    })
                    console.log(this.tabLayoutWrapper.children[0].children);
                    if(position === 1) {
                        this.tabLayoutWrapper.children[0].children[0].appendChild(tabName);
                    } else {
                        this.tabLayoutWrapper.children[1].children[0].appendChild(tabName);
                    }
                    this.tabLayoutWrapper.querySelector(".temp-tabs").appendChild(tab.element);
                    this.setTabPosition(tab.id,position,active);
                }
            }
            class Tab {
                /**
                 * Creates a Tab object with an element created from the given id
                 * @param {string} id
                 * @constructor
                 */
                constructor(name,id) {
                    /**
                     * The name of the tab
                     * @type {string}
                     * @public
                    */
                    this.name = name;
                    /**
                     * The id of the tab
                     * @type {string}
                     * @public
                    */
                    this.id = id;
                    /**
                     * The tab element with the given id
                     * @type {Element}
                     * @public
                    */
                    this.element = document.createElement("div");
                    this.element.id = id;
                    /*this.element.addEventListener("dragstart",function(e){
                        e.setData("text/plain","-tab-drag-id:"+e.target.id);
                    })*/
                }
                _connectTabLayout() {
                    //
                }
            }
        </script>
        <script>
            /*ClassicEditor
                .create(document.querySelector("#ckeditor"));
            var editor = document.querySelector("#md-editor");
            var preview = document.querySelector(".preview-iframe");

            /*var activeTab = document.querySelector("#ckeditor");
            var tabLayout = {
                splitted: false,
                order: ["options","options"]
            }
            var updatePreviewOnShow = false;

            document.querySelector(".tab-name-wrapper").addEventListener("click",function(e) {
                document.querySelectorAll(".tab").forEach(function(item) {
                    item.classList.remove("active-tab");
                })
                document.querySelectorAll(".tab-name").forEach(function(item) {
                    item.classList.remove("active-tab-name");
                })
                var newsActiveTab = document.querySelector("#" + e.target.getAttribute("data-tab-id"));
                if(newsActiveTab) {
                    activeTab = newsActiveTab;
                    activeTab.classList.add("active-tab");
                    e.target.classList.add("active-tab-name");
                }
                /*if(splitted){
                    if(activeTab){
                        var activeTabId = activeTab.id;
                        if(tabLayout.left === activeTabId){
                            //
                        }
                    }
                }else{
                    tabLayout.left === e.target.getAttribute("data-tab-id");
                    tabLayout.right === e.target.getAttribute("data-tab-id");
                }
                console.log(e);*
                if(updatePreviewOnShow) {
                    preview.srcdoc = marked.parse(editor.value);
                    updatePreviewOnShow = false;
                }
            })*/

            var tabLayout = new TabLayout(document.querySelector("main"));
            var markdownTab = new Tab("Options","options");
            markdownTab.element.innerHTML = "<textarea></textarea>";
            var previewTab = new Tab("Preview","preview");
            previewTab.element.innerHTML = "<iframe></iframe>";
            var cmEditorTab = new Tab("Markdown","markdown-editor");
            cmEditorTab.element.innerHTML = "<div></div><textarea></textarea>";

            tabLayout.addTab(markdownTab,1,false);
            tabLayout.addTab(previewTab,1,false);
            tabLayout.addTab(cmEditorTab,1,true);

            var textarea = document.querySelector("#md-editor>textarea");
            var previewIframe = document.querySelector("#preview>iframe");
            /*textarea.addEventListener("input",function(e) {
                //if(tabLayout.order.includes("preview")) {
                previewIframe.srcdoc = marked.parse(e.target.value);
                /*} else {
                    updatePreviewOnShow = true;
                }*
            });*/
            var cmEditorButtons = document.querySelector("#markdown-editor>div");
            cmEditorButtons.innerHTML =
                "<button onclick='mdEditor.setHeading(1);'>H1</button>" +
                "<button onclick='mdEditor.setHeading(2);'>H2</button>" +
                "<button onclick='mdEditor.setHeading(3);'>H3</button>" +
                "<button onclick='mdEditor.setHeading(4);'>H4</button>" +
                "<button onclick='mdEditor.setHeading(5);'>H5</button>" +
                "<button onclick='mdEditor.setHeading(6);'>H6</button>" +
                "<button onclick='mdEditor.setBold();'><b>B</b></button>" +
                "<button onclick='mdEditor.setItalic();'><i>i</i></button>" +
                "<button onclick='mdEditor.setUnderline();'><u>U</u></button>" +
                "<button onclick='mdEditor.setDel();'><del>a</del></button>";
            var cmEditorArea = document.querySelector("#markdown-editor>textarea");
            //var ckEditor = document.querySelector("#ckeditor");
            //var ed = ClassicEditor.create(ckEditor);
            //var ed = new FroalaEditor(ckEditor);
            //var ed = new EditorJS(ckEditor.id);
            /*CodeMirrorSpellChecker({
                codeMirrorInstance: CodeMirror
            });*/
            var ed = CodeMirror.fromTextArea(cmEditorArea,{
                inputStyle: "contenteditable",
                spellcheck: true,
                mode: "markdown"
                /*mode: "spell-checker",
                backdrop:"markdown"*/
            });

            class MarkdownEditor {
                constructor(cm) {
                    this.cm = cm;
                }
                setBold() {
                    if(this.cm.getSelection()) {
                        this.cm.replaceSelection("**" + this.cm.getSelection() + "**");
                    } else {
                        this.cm.replaceSelection("****");
                        var cursorPos = this.cm.getCursor();
                        cursorPos.ch -= 2;
                        this.cm.setCursor(cursorPos);
                    }
                    this.cm.focus();
                }
                setItalic() {
                    if(this.cm.getSelection()) {
                        this.cm.replaceSelection("_" + this.cm.getSelection() + "_");
                    } else {
                        this.cm.replaceSelection("__");
                        var cursorPos = this.cm.getCursor();
                        cursorPos.ch -= 1;
                        this.cm.setCursor(cursorPos);
                    }
                    this.cm.focus();
                }
                setItalic() {
                    if(this.cm.getSelection()) {
                        this.cm.replaceSelection("_" + this.cm.getSelection() + "_");
                    } else {
                        this.cm.replaceSelection("__");
                        var cursorPos = this.cm.getCursor();
                        cursorPos.ch -= 1;
                        this.cm.setCursor(cursorPos);
                    }
                    this.cm.focus();
                }
                setDel() {
                    if(this.cm.getSelection()) {
                        this.cm.replaceSelection("~~" + this.cm.getSelection() + "~~");
                    } else {
                        this.cm.replaceSelection("~~~~");
                        var cursorPos = this.cm.getCursor();
                        cursorPos.ch -= 2;
                        this.cm.setCursor(cursorPos);
                    }
                    this.cm.focus();
                }
                setUnderline() {
                    if(this.cm.getSelection()) {
                        this.cm.replaceSelection("<u>" + this.cm.getSelection() + "</u>");
                    } else {
                        this.cm.replaceSelection("<u></u>");
                        var cursorPos = this.cm.getCursor();
                        cursorPos.ch -= 4;
                        this.cm.setCursor(cursorPos);
                    }
                    this.cm.focus();
                }
                setHeading(n) {
                    var cursor = this.cm.getCursor();
                    var selection = this.cm.getSelection();
                    var oldValue = this.cm.doc.getValue();
                    var newValue = oldValue.replace(/^[#]{1,6} /,"");
                    this.cm.doc.setValue(newValue)
                    console.log(this.cm);
                    console.log(cursor)
                    this.cm.setCursor(cursor.line,0);
                    this.cm.replaceSelection((new Array(n + 1).join("#")) + " " + selection);
                    this.cm.setCursor(cursor.line,cursor.ch + n + 1 - (oldValue.length - newValue.length));
                    this.cm.focus();
                }
            }

            var mdEditor = new MarkdownEditor(ed);

            /*ed.on("dragover",function(cm,e) {
                console.log(" 11over",e)
                if(e.dataTransfer.getData("text/plain").startsWith("-tab-drag-id:")) {
                    //e.preventDefault();
                    //return false;
                }
            });
            ed.on("drop",function(cm,e) {
                console.log(" -----drop",e)
            });
            ed.on("dragenter",function(cm,e) {
                console.log(" -----enter",e)
                e.preventDefault();
            });
            ed.on("dragleave",function(cm,e) {
                console.log(" -----leave",e)
                e.preventDefault();
            });*/
            ed.on("change",function(cm) {
                console.log("changed",cm.getValue())
                previewIframe.srcdoc = marked.parse(cm.getValue());
            });
            ed.on("keydown",function(cm,e) {
                if(e.ctrlKey && e.key === "b") {
                    /*if(cm.getSelection()){
                        cm.replaceSelection("**"+cm.getSelection()+"**");
                    }else{
                        cm.replaceSelection("****");
                        var cursorPos = cm.getCursor();
                        cursorPos.ch -= 2;
                        cm.setCursor(cursorPos);
                    }*/
                    mdEditor.setBold();
                    e.preventDefault();
                } else if(e.ctrlKey && e.key === "i") {
                    mdEditor.setItalic();
                    e.preventDefault();
                } else if(e.ctrlKey && e.key === "d") {
                    mdEditor.setDel();
                    e.preventDefault();
                } else if(e.ctrlKey && e.key === "h") {
                    mdEditor.setHeading(1);
                    e.preventDefault();
                } else if(e.ctrlKey && e.key === "u") {
                    mdEditor.setUnderline();
                    e.preventDefault();
                }
                console.log(cm,cm.getSelection(),e);
            });
            /*ckEditor.addEventListener("keyup",function(e){
                console.log(e);
            })*/
            /*var ed = CodeMirror(ckEditor,{
                mode: "spell-checker",
                backdrop:"markdown"
            });*/
            //ed.update()
            console.log(ed,ed.getTextArea());
        </script>
        <style>
            .cm-spell-error {
                background-color: rgba(255, 0, 0, 0.5);
            }
        </style>
    </body>
</html>